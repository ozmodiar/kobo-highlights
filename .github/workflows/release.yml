name: release-binaries

on:
  release:
    types: [published]

permissions:
  contents: write

env:
  GO_VERSION: '1.24.x'
  BIN_NAME: kobo-highlights

jobs:
  linux:
    name: Build (Linux)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install cross toolchain (arm64)
        if: matrix.goarch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      - name: Build
        run: |
          mkdir -p dist
          if [ "${{ matrix.goarch }}" = "arm64" ]; then export CC=aarch64-linux-gnu-gcc; fi
          GOOS=linux GOARCH=${{ matrix.goarch }} CGO_ENABLED=1 go build -trimpath -ldflags="-s -w" -o dist/${{ env.BIN_NAME }}_linux_${{ matrix.goarch }} .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.goarch }}
          path: dist/*

  darwin:
    name: Build (macOS)
    runs-on: macos-14
    strategy:
      matrix:
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build
        run: |
          mkdir -p dist
          GOOS=darwin GOARCH=${{ matrix.goarch }} CGO_ENABLED=1 go build -trimpath -ldflags="-s -w" -o dist/${{ env.BIN_NAME }}_darwin_${{ matrix.goarch }} .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: darwin-${{ matrix.goarch }}
          path: dist/*

  windows:
    name: Build (Windows)
    runs-on: windows-latest
    strategy:
      matrix:
        goarch: [amd64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build
        shell: bash
        run: |
          mkdir -p dist
          GOOS=windows GOARCH=${{ matrix.goarch }} CGO_ENABLED=1 go build -trimpath -ldflags="-s -w" -o dist/${{ env.BIN_NAME }}_windows_${{ matrix.goarch }}.exe .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.goarch }}
          path: dist/*

  release:
    name: Publish Release Assets
    runs-on: ubuntu-latest
    needs: [linux, darwin, windows]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Repackage structure
        run: |
          mkdir out
          find dist -type f -maxdepth 2 -exec cp {} out/ \;
          ls -l out
      - name: Generate checksums
        run: |
          cd out
          shasum -a 256 * > SHA256SUMS
      - name: Upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            out/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
